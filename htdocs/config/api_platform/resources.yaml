resources:
    App\Entity\Address:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/addresses'
            post: ~
            special:
                method: 'POST'
                path: '/addresses'
                controller: 'App\Controller\AddressSpecial'
        itemOperations:
            get:
                method: 'GET'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
                    
    App\Entity\Card:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards'
                swagger_context:
                    summary: 'Catalogue des cartes de fidélité'
                    description: "Récupération de toutes les cartes de fidélité"

            create_card:
                method: 'POST'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/card/new'
                controller: 'App\Controller\Card\CardCreate'
                swagger_context:
                    summary: 'Création de carte de fidélité'
                    description: "Créer une nouvelle carte de fidélité à partir d'un établissement existant"
                    requestBody: '{"establishment": "/api/establishments/1","establishmentCode": 123}'
                    parameters:
                        - in: body
                          name: card
                          schema:
                                type: object
                                required:
                                    - establishment
                                properties:
                                    establishment:
                                        type: object
                                    codeCustomer:
                                        type: string
                                    codeCard:
                                        type: string
                                    customer:
                                        type: object

        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Récupération d'une carte de fidélité"
                    description: "Permet de récupérer une carte de fidélité à partir de son id"

            viewpdf_card:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards/pdf/{id}'
                requirements:
                  id: '\d+'
                controller: 'App\Controller\Card\CardGeneratePdf'
                swagger_context:
                    summary: 'Génération du fichier PDF de la carte de fidélité'
                    description: "Générer un fichier PDF de la carte de fidélité à partir de son ID"
                    responses:
                        '200':
                            description: OK
                            content:
                                application/pdf:

            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Modification d'une carte de fidélité"
                    description: "Permet de modifier une carte de fidélité à partir de son id"

            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Suppression d'une carte de fidélité"
                    description: "Permet de supprimer une carte de fidélité à partir de son id"

    App\Entity\Customer:
        #attributes:
            #normalization_context: {groups: ['read']}
            #denormalization_context: {groups: ['write']}
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/customers'
                swagger_context:
                    summary: 'Retrieves the list of customers.'
            register:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/customers/register'
                controller: 'App\Controller\Customer\CustomerRegister'
                swagger_context:
                    summary: 'Register a customer.'
                    parameters:
                      - in: body
                        name: 'customer'
                        description: 'The new customer'
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                    example: "John"
                                lastName:
                                    type: string
                                    example: "Doe"
                                username:
                                    type: string
                                    example: "JDoe24"
                                email:
                                    type: string
                                    example: "john.doe@domain.com"
                                password:
                                    type: string
                                    example: "4tNg2qB2"
                                birthday:
                                    #type: string
                                    example: '1990-08-24'
                                addresses:
                                    type: object
                                    example: ["/api/addresses/1"]
                                phoneNumber:
                                    type: string
                                    example: '0692571843'
                                establishments:
                                    type: object
                                    example: ["/api/establishments/1"]
                                cards:
                                    type: object
                                    example: ["/api/cards/1"]
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: 'Retrieves a customer.'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: 'Update the customer.'
                    parameters:
                      - {in: path, name: id, identifier: true, required: true, type: string}
                      - in: body
                        name: 'customer'
                        description: 'The updated customer'
                        schema:
                            type: object
                            required:
                              - firstName
                              - lastName
                              - username
                              - email
                              - password
                            properties:
                                firstName:
                                    type: string
                                    example: "John"
                                lastName:
                                    type: string
                                    example: "Doe"
                                username:
                                    type: string
                                    example: "JDoe24"
                                email:
                                    type: string
                                    example: "john.doe@domain.com"
                                password:
                                    type: string
                                    example: "4tNg2qB2"
                                birthday:
                                    type: string
                                    example: '1990-08-24'
                                address:
                                    type: string
                                    example: [
                                                {
                                                    "streetNumber": "string",
                                                    "streetName": "string",
                                                    "complement": "string",
                                                    "zipCode": "string",
                                                    "city": "string",
                                                    "country": "string",
                                                }
                                             ]
                                addresses:
                                    type: class
                                    example: ["/api/addresses/1"]
                                phoneNumber:
                                    type: string
                                    example: '0692571843'
                                establishments:
                                    type: object
                                    example: ["/api/establishments/1"]
                                cards:
                                    type: object
                                    example: ["/api/cards/1"]
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: 'Delete the customer.'
            reset_password:
                method: 'PATCH'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/customers/{id}/reset-password/{email}/{token}'
                controller: 'App\Controller\Customer\ResetPassword'
                swagger_context:
                    summary: 'Replaces the password (forgotten).'
                    parameters:
                        - {in: path, name: id, identifier: true, required: true, type: string}
                        - {in: path, name: email, required: true, type: string}
                        - {in: path, name: token, required: true, type: string}
                        - in: body
                          name: 'reset password'
                          schema:
                              type: object
                              properties:
                                  password:
                                      type: string
                                      example: "string(8-20)"
            #enable_account:
                #method: 'GET'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                #path: '/customers/enable-account/{email}/{token}'
                #controller: 'App\Controller\Customer\EnableAccount'
                #swagger_context:
                    #summary: 'Enabling the account.'
                    #parameters:
                        #- {in: path, name: id, , required: true, type: string}
                        #- {in: path, name: email, identifier: true, required: true, type: string}
                        #- {in: path, name: token, required: true, type: string}
                        #- in: body
                          #name: 'enable account'
                          #schema:
                              #type: object

    App\Entity\Establishment:
        #attributes:
            #normalization_context: {groups: ['read']}
            #denormalization_context: {groups: ['write']}
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/establishments'
            post:
                method: 'POST'
                #access_control: 'is_granted("ROLE_API")'
                path: '/establishments'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_API")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Role:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles'
            post:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Staff:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff'
            register:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff/register'
                controller: 'App\Controller\Staff\StaffRegister'
                swagger_context:
                    summary: 'Register a staff user.'
                    parameters:
                      - in: body
                        name: 'staff user'
                        description: 'The new staff user'
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                    example: "John"
                                lastName:
                                    type: string
                                    example: "Doe"
                                email:
                                    type: string
                                    example: "john.doe@domain.com"
                                password:
                                    type: string
                                    example: "4tNg2qB2"
                                birthday:
                                    #type: string
                                    example: '1990-08-24'
                                addresses:
                                    type: object
                                    example: ["/api/addresses/1"]
                                phoneNumber:
                                    type: string
                                    example: '0692571843'
                                establishments:
                                    type: object
                                    example: ["/api/establishments/1"]
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Visit:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits'
            post:
                method: 'POST'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'