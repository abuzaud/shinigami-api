resources:
    App\Entity\Address:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/addresses'
            post: ~
            special:
                method: 'POST'
                path: '/addresses'
                controller: 'App\Controller\AddressSpecial'
        itemOperations:
            get:
                method: 'GET'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                path: '/addresses/{id}'
                requirements:
                    id: '\d+'
                    
    App\Entity\Card:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards'
                swagger_context:
                    summary: 'Catalogue des cartes de fidélité'
                    description: "Récupération de toutes les cartes de fidélité"

            create_card:
                method: 'POST'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/card/new'
                controller: 'App\Controller\Card\CardCreate'
                swagger_context:
                    summary: 'Création de carte de fidélité'
                    description: "Créer une nouvelle carte de fidélité à partir d'un établissement existant"
                    requestBody: '{"establishment": "/api/establishments/1","establishmentCode": 123}'
                    parameters:
                        - in: body
                          name: card
                          schema:
                                type: object
                                required:
                                    - establishment
                                properties:
                                    establishment:
                                        type: object
                                    codeCustomer:
                                        type: string
                                    codeCard:
                                        type: string
                                    customer:
                                        type: object

        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Récupération d'une carte de fidélité"
                    description: "Permet de récupérer une carte de fidélité à partir de son id"

            viewpdf_card:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/cards/pdf/{id}'
                requirements:
                  id: '\d+'
                controller: 'App\Controller\Card\CardGeneratePdf'
                swagger_context:
                    summary: 'Génération du fichier PDF de la carte de fidélité'
                    description: "Générer un fichier PDF de la carte de fidélité à partir de son ID"
                    responses:
                        '200':
                            description: OK
                            content:
                                application/pdf:

            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Modification d'une carte de fidélité"
                    description: "Permet de modifier une carte de fidélité à partir de son id"

            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/cards/{id}'
                requirements:
                    id: '\d+'
                swagger_context:
                    summary: "Suppression d'une carte de fidélité"
                    description: "Permet de supprimer une carte de fidélité à partir de son id"

    App\Entity\Customer:
        attributes:
            normalization_context: {groups: ['read']}
            denormalization_context: {groups: ['write']}
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/customers'
            post: ~
            special:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/customers'
                controller: 'App\Controller\CustomerSpecial'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_CUSTOMER")'
                path: '/customers/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Establishment:
        attributes:
            normalization_context: {groups: ['read']}
            denormalization_context: {groups: ['write']}
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/establishments'
            post:
                method: 'POST'
                #access_control: 'is_granted("ROLE_API")'
                path: '/establishments'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ESTABLISHMENT")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_API")'
                path: '/establishments/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Role:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles'
            post:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/roles/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Staff:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff'
            post:
                method: 'POST'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("ROLE_STAFF")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("ROLE_ADMIN")'
                path: '/staff/{id}'
                requirements:
                    id: '\d+'

    App\Entity\Visit:
        #attributes:
            #normalization_context:
                #groups: ['name']
            #denormalization_context:
                #groups: ['name']
        collectionOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits'
            post:
                method: 'POST'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits'
        itemOperations:
            get:
                method: 'GET'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'
            put:
                method: 'PUT'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'
            delete:
                method: 'DELETE'
                #access_control: 'is_granted("IS_AUTHENTICATED_FULLY")'
                path: '/visits/{id}'
                requirements:
                    id: '\d+'